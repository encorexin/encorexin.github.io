[{"title":"强大的开源输入法 Rime 安装记录和配制指南","path":"/Linux/Rime/rime-installation-guide.html","content":"Rime 输入法介绍最近一直在寻找一款合适的输入法，突然搜索到了 Rime&#x2F;中州韵 输入法，瞬间就被它独特的功能吸引到了，写下这边文章记录一下我的整个安装&amp;配置过程。Rime&#x2F;中州韵输入法是一款强大的开源输入法框架，支持 Windows、MacOS、Linux、Android 等平台。 安装各个平台的安装方法： Linux编译安装查看官方 wiki ： https://github.com/rime/home/wiki/RimeWithIBus使用 ibus-rime ，各发行版安装： ArchLinu : 1sudo pacman -S ibus-rime Ubuntu&#x2F;Debian : 1sudo apt install ibus-rime Fedora : 1sudo dnf install ibus-rime fcitx 安装：https://github.com/fcitx/fcitx-rime MacOSMacOS 上的 rime 叫鼠须管/Squirrel，下载： https://github.com/rime/squirrel/releases WindowsWindows 上的 rime 叫小狼毫/weasel，下载：https://github.com/rime/weasel/releases AndroidAndroid 上的 rime 由第三方开发，叫同文输入法，下载地址：https://github.com/osfans/trime/releases 配置安装完成之后就是配置了，首先我们先选择一个适合自己的输入方案，然后了解 rime 的配置文件存储位置。目的是更好的完成一个适合自己的输入法。 输入方案可以通过东风破 plum 配置管理器安装。东风破 plum 使用： 123git clone --depth 1 https://github.com/rime/plum.gitcd plumbash rime-install :preset ###要安装的方案 各平台配置文件路径：Linux : ~/.config/ibus/rime/ 0.9.1 以下版本为 ~/.ibus/rime/ fcitx5 为 ~/.local/share/fcitx5/rime/MacOS : ~/Library/Rime/Windows : %APPDATA%\\Rime 配置文件说明： （如不存在可手动创建）用户资料夹 则包含为用户准备的内容，如： 全局设定 default.yaml 发行版设定 weasel.yaml squirrel.yaml build&#x2F;ibus_rime.yaml 预设输入方案副本 &lt;方案标识&gt;.schema.yaml ※安装信息 installation.yaml ※用户状态信息 user.yaml 编译输入方案所产出的二进制文件： Rime 棱镜 &lt;方案标识&gt;.prism.bin Rime 固态词典 &lt;词典名&gt;.table.bin Rime 反查词典 &lt;词典名&gt;.reverse.bin 记录用户写作习惯的文件： ※用户词典 &lt;词典名&gt;.userdb&#x2F; 或 &lt;词典名&gt;.userdb.kct ※用户词典快照 &lt;词典名&gt;.userdb.txt、&lt;词典名&gt;.userdb.kct.snapshot 见于同步文件夹 以及用户自己设定的： ※用户对全局设定的定制信息 default.custom.yaml ※用户对预设输入方案的定制信息 &lt;方案标识&gt;.custom.yaml ※用户自制输入方案及配套的词典源文件 注：以上标有 ※ 号的文件，包含用户资料，您在清理文件时要注意备份！ 优先级： 用户对全局设定的定制信息-default.custom.yaml &gt; 用户对预设输入方案的定制信息-&lt;方案标识&gt;.custom.yaml &gt; 全局设定-default.yaml 选择方案在输入界面按默认快捷键：ctrl + ~ 或者 F4 选择一个适合自己的方案。 部署修改完配置文件之后配置还没有生效，用户须要使用 Rime 重新进行部署操作。 以 Linux Gnome 桌面为例： 终端部署： 1touch ~/.config/ibus/rime/; ibus restart 其它平台也大同小异，一样的方式。 修改实例修改为横排展示： squirrel.custom.yaml 和 weasel.custom.yaml 只需要添加以下语句： 1&quot;style/horizontal&quot;: true # 横排展示 build/ibus_rime.yaml 修改: 12style: horizontal: true # false 改为 true 横排展示 修改翻页按键（修改输入方案的配置 custom 文件），以明月拼音为例： luna_pinyin.custom.yaml 修改为方括号[]翻页： 1234patch: &quot;key_binder/bindings&quot;: - &#123; when: paging, accept: bracketleft, send: Page_Up &#125; - &#123; when: has_menu, accept: bracketright, send: Page_Down &#125; 修改为加减号-+翻页： 1234patch: &quot;key_binder/bindings&quot;: - &#123; when: paging, accept: minus, send: Page_Up &#125; - &#123; when: has_menu, accept: equal, send: Page_Down &#125; 修改更多按键请参考：Rime_description 配置词库在 default.custom.yaml 文件中开启： 1&quot;translator/enable_user_dict&quot;: true 然后在 当前输入法方案的定制文件（如我的是明月拼音简体） luna_pinyin_simp.custom.yaml 中添加内容： 12patch: &#x27;translator/dictionary&#x27;: custom_dict.all custom_dict.all : 为字典总表文件。对应就是配置文件目录内custom_dict.all.dict.yaml ，这个可以直接自定义。 编辑 custom_dict.all.dict.yaml ： 1234567891011121314name: custom_dict.all ##注意name和文件名一致version: &quot;2020.6.7&quot;sort: by_weightuse_preset_vocabulary: true# 此处为 输入法所用到的词库，既补充拓展词库的地方import_tables: - luna_pinyin # 系统基础字库 - dicts/luna_pinyin.chaizi # 拆字词库 - dicts/custom_simple # 自定义 - dicts/luna_pinyin.sougou # 搜狗词库 - dicts/luna_pinyin.xiandaihanyu # 现代汉语词典 - dicts/se_words # 互联网网络词汇 - dicts/luna_pinyin.biaoqing # 表情 - dicts/luna_pinyin.emoji # emoji Ext luna_pinyin 是输入法方案默认的词库，其它的词库都是在dicts 目录下的。如字段 dicts/custom_simple 对应的就是 dicts 目录下的 custom_simple.dict.yaml文件，新添加词库须要放到这个目录下并添加到 custom_dict.all.dict.yaml 文件内启用。 词库转换软件：深蓝词库转换 启用 Rime 的 Lua脚本插件启用 Rime 的 Lua 脚本插件可实现更多功能，如时间组件等。 自编译 librime 添加 librime-lua 插件（Fedora 37） 首先安装依赖： 1sudo dnf install git cmake boost boost-devel glog glog-devel leveldb-devel marisa marisa-devel opencc opencc-devel yaml-cpp yaml-cpp-devel gtest gtest-devel 然后克隆源码： 1234567mkdir ~/workspace/cd ~/workspace/git clone https://github.com/rime/librime.gitcd librerime/bash install-plugins.sh hchunhui/librime-luacd plugins/lua/git clone https://github.com/hchunhui/librime-lua.git -b thirdparty --depth=1 thirdparty 编译安装： 123# On Linux, merged buildmake merged-pluginssudo make install ok，完成重启或者注销重新登录就行了。 启用时间日期组件&amp;英文输入使用 plum 安装 easy_en: 1bash rime-install BlindingDark/rime-easy-en 在配置目录下创建 rime.lua 文件，写入如下内容： 1234time_translator = require(&quot;time&quot;)date_translator = require(&quot;date&quot;)week_translator = require(&quot;week&quot;)easy_en_translator = require(&quot;easy_en&quot;) 在配置幕下创建 lua 目录，并在目录下创建 time.lua date.lua week.lua 组件。 lua/time.lua123456789101112 --lua语言中的注释用“--”local function translator(input, seg) if (input == &quot;time&quot;) then --关键字更改，你也可以用or语句定义多个关键字 yield(Candidate(&quot;time&quot;, seg.start, seg._end, os.date(&quot;%H:%M&quot;), &quot; &quot;)) yield(Candidate(&quot;time&quot;, seg.start, seg._end, os.date(&quot;%H点%M分&quot;), &quot; &quot;)) yield(Candidate(&quot;time&quot;, seg.start, seg._end, os.date(&quot;%H:%M:%S&quot;), &quot; &quot;)) yield(Candidate(&quot;time&quot;, seg.start, seg._end, os.date(&quot;%H点%M分%S秒&quot;), &quot; &quot;)) endendreturn translator lua/date.lua123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148 --lua语言中的注释用“--”local function translator(input, seg) if (input == &quot;date&quot;) then--------------------------------------------------------------------------------------普通日期1，类似2022年01月02日date1=os.date(&quot;%Y年%m月%d日&quot;)date_y=os.date(&quot;%Y&quot;) --取年date_m=os.date(&quot;%m&quot;) --取月date_d=os.date(&quot;%d&quot;) --取日--yield(Candidate(&quot;date&quot;, seg.start, seg._end, date1, &quot; &quot;))--------------------------------------------------------------------------------------普通日期2，类似2022年1月1日num_m=os.date(&quot;%m&quot;)+0num_m1=math.modf(num_m)num_d=os.date(&quot;%d&quot;)+0num_d1=math.modf(num_d)date2=os.date(&quot;%Y年&quot;)..tostring(num_m1)..&quot;月&quot;..tostring(num_d1)..&quot;日&quot;yield(Candidate(&quot;date&quot;, seg.start, seg._end, date2, &quot; &quot;))--------------------------------------------------------------------------------------普通日期3，类似1月1日num_m=os.date(&quot;%m&quot;)+0num_m1=math.modf(num_m)num_d=os.date(&quot;%d&quot;)+0num_d1=math.modf(num_d)date3=tostring(num_m1)..&quot;月&quot;..tostring(num_d1)..&quot;日&quot;yield(Candidate(&quot;date&quot;, seg.start, seg._end, date3, &quot; &quot;))yield(Candidate(&quot;date&quot;, seg.start, seg._end, os.date(&quot;%Y/%m/%d&quot;), &quot; &quot;))yield(Candidate(&quot;date&quot;, seg.start, seg._end, os.date(&quot;%Y-%m-%d&quot;), &quot; &quot;))--------------------------------------------------------------------------------------大写日期，类似二〇二〇年十一月二十六日date_y=date_y:gsub(&quot;%d&quot;,&#123;[&quot;1&quot;]=&quot;一&quot;,[&quot;2&quot;]=&quot;二&quot;,[&quot;3&quot;]=&quot;三&quot;,[&quot;4&quot;]=&quot;四&quot;,[&quot;5&quot;]=&quot;五&quot;,[&quot;6&quot;]=&quot;六&quot;,[&quot;7&quot;]=&quot;七&quot;,[&quot;8&quot;]=&quot;八&quot;,[&quot;9&quot;]=&quot;九&quot;,[&quot;0&quot;]=&quot;〇&quot;,&#125;)date_y=date_y..&quot;年&quot;date_m=date_m:gsub(&quot;%d&quot;,&#123;[&quot;1&quot;]=&quot;一&quot;,[&quot;2&quot;]=&quot;二&quot;,[&quot;3&quot;]=&quot;三&quot;,[&quot;4&quot;]=&quot;四&quot;,[&quot;5&quot;]=&quot;五&quot;,[&quot;6&quot;]=&quot;六&quot;,[&quot;7&quot;]=&quot;七&quot;,[&quot;8&quot;]=&quot;八&quot;,[&quot;9&quot;]=&quot;九&quot;,[&quot;2&quot;]=&quot;二&quot;,[&quot;3&quot;]=&quot;三&quot;,[&quot;4&quot;]=&quot;四&quot;,[&quot;5&quot;]=&quot;五&quot;,[&quot;6&quot;]=&quot;六&quot;,[&quot;7&quot;]=&quot;七&quot;,[&quot;8&quot;]=&quot;八&quot;,[&quot;9&quot;]=&quot;九&quot;,[&quot;0&quot;]=&quot;&quot;,&#125;)date_d=date_d..&quot;日&quot;if num_d1&gt;9 thenif num_d1&lt;19 thendate_d=&quot;十&quot;..string.sub(date_d,4,#date_d)endendif num_d1&gt;19 then date_d=string.sub(date_d,1,3)..&quot;十&quot;..string.sub(date_d,4,#date_d) enddate4=date_y..date_m..date_dyield(Candidate(&quot;date&quot;, seg.start, seg._end, date4, &quot; &quot;))--------------------------------------------------------------------------------------英文日期 local date_d=os.date(&quot;%d&quot;) local date_m=os.date(&quot;%m&quot;) local date_y=os.date(&quot;%Y&quot;) local date_m1=&quot;&quot; local date_m2=&quot;&quot; if date_m==&quot;01&quot; then date_m1=&quot;Jan.&quot; date_m2=&quot;January&quot; end if date_m==&quot;02&quot; then date_m1=&quot;Feb.&quot; date_m2=&quot;February&quot; end if date_m==&quot;03&quot; then date_m1=&quot;Mar.&quot; date_m2=&quot;March&quot; end if date_m==&quot;04&quot; then date_m1=&quot;Apr.&quot; date_m2=&quot;April&quot; end if date_m==&quot;05&quot; then date_m1=&quot;May.&quot; date_m2=&quot;May&quot; end if date_m==&quot;06&quot; then date_m1=&quot;Jun.&quot; date_m2=&quot;June&quot; end if date_m==&quot;07&quot; then date_m1=&quot;Jul.&quot; date_m2=&quot;July&quot; end if date_m==&quot;08&quot; then date_m1=&quot;Aug.&quot; date_m2=&quot;August&quot; end if date_m==&quot;09&quot; then date_m1=&quot;Sept.&quot; date_m2=&quot;September&quot; end if date_m==&quot;10&quot; then date_m1=&quot;Oct.&quot; date_m2=&quot;October&quot; end if date_m==&quot;11&quot; then date_m1=&quot;Nov.&quot; date_m2=&quot;November&quot; end if date_m==&quot;12&quot; then date_m1=&quot;Dec.&quot; date_m2=&quot;December&quot; end if date_d==&quot;0&quot; then symbal=&quot;st&quot; elseif date_d==&quot;1&quot; then symbal=&quot;nd&quot; elseif date_d==&quot;2&quot; then symbal=&quot;rd&quot; else symbal=&quot;th&quot; enddate5=date_m1..&quot; &quot;..date_d..symbal..&quot;, &quot;..date_ydate6=date_m2..&quot; &quot;..date_d..symbal..&quot;, &quot;..date_yyield(Candidate(&quot;date&quot;, seg.start, seg._end, date5, &quot; &quot;))yield(Candidate(&quot;date&quot;, seg.start, seg._end, date6, &quot; &quot;))yield(Candidate(&quot;date&quot;, seg.start, seg._end, os.date(&quot;%Y%m%d&quot;), &quot; &quot;)) endend------------------------------------------------------------------------------------return translator lua/week.lua123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051--lua语言中的注释用“--”function translator(input, seg) if (input == &quot;week&quot;) then local day_w=os.date(&quot;%w&quot;) local day_w1=&quot;&quot; local day_w2=&quot;&quot; local day_w3=&quot;&quot; if day_w==&quot;0&quot; then day_w1=&quot;星期日&quot; day_w2=&quot;Sunday&quot; day_w3=&quot;Sun.&quot; end if day_w==&quot;1&quot; then day_w1=&quot;星期一&quot; day_w2=&quot;Monday&quot; day_w3=&quot;Mon.&quot; end if day_w==&quot;2&quot; then day_w1=&quot;星期二&quot; day_w2=&quot;Tuesday&quot; day_w3=&quot;Tues.&quot; end if day_w==&quot;3&quot; then day_w1=&quot;星期三&quot; day_w2=&quot;Wednesday&quot; day_w3=&quot;Wed.&quot; end if day_w==&quot;4&quot; then day_w1=&quot;星期四&quot; day_w2=&quot;Thursday&quot; day_w3=&quot;Thur.&quot; end if day_w==&quot;5&quot; then day_w1=&quot;星期五&quot; day_w2=&quot;Friday&quot; day_w3=&quot;Fri.&quot; end if day_w==&quot;6&quot; then day_w1=&quot;星期六&quot; day_w2=&quot;Saturday&quot; day_w3=&quot;Sat.&quot; end yield(Candidate(&quot;date&quot;, seg.start, seg._end, day_w1, &quot; &quot;)) yield(Candidate(&quot;date&quot;, seg.start, seg._end, day_w2, &quot; &quot;)) yield(Candidate(&quot;date&quot;, seg.start, seg._end, day_w3, &quot; &quot;)) yield(Candidate(&quot;week&quot;, seg.start, seg._end, os.date(&quot;%w&quot;),&quot;&quot;)) endendreturn translator 调试查看日志文件： Windows Weasel: %TEMP% Mac OS X Squirrel: $TEMPDIR Linux iBus: &#x2F;tmp 查看日志文件（Linux）： 1234cd /tmpcat rime.ibus.INFOcat rime.ibus.WARNINGcat rime.ibus.ERROR 推荐推荐一个超级方便的词库配置雾凇拼音。写完这篇后发现了这个配置，我感觉用起来挺舒服的；作者已经配置好了，跟着教程安装就行了，以下是链接： 安装或更新：全部文件 1bash rime-install iDvel/rime-ice:others/recipes/full 安装或更新：所有词库文件（包含下面三个） 1bash rime-install iDvel/rime-ice:others/recipes/all_dicts 安装或更新：拼音词库文件 1bash rime-install iDvel/rime-ice:others/recipes/cn_dicts 安装或更新：英文词库文件 1bash rime-install iDvel/rime-ice:others/recipes/en_dicts 安装或更新：opencc(emoji) 1bash rime-install iDvel/rime-ice:others/recipes/opencc 参考资料 跨平台的开源输入法Rime定制指南，打造强大的个性化输入法 rime-easy-en librime-lua-wiki RimeWithSchemata Schema.yaml 詳解 Rime 配置：雾凇拼音","tags":["linux","rime","fedora"],"categories":["Linux","Rime"]},{"title":"在 Fedora 37 上安装 Redroid","path":"/Linux/run-redroid-on-fedora.html","content":"redroid 是一个开源的 AIC(Android in cloud) 解决方案，可以运行在 arm64 amd64 架构的平台上。加上 ARM 转译器可以运行大部分的 Android APP，本文记录在 fedore 37 的安装过程。 准备 fedora-37-6.2.8-200.fc37.x86_64 docker 打开终端使用官方命令安装 ： 1sudo curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun 3.scrcpy or QtScrcpy,我使用的是 QtScrcpy4.安装 android-tools ： 1sudo dnf install android-tools 5.关闭 SELinux （临时）: 1sudo setenforce 0 6.获取 ARM 转译器 libndk 使用 Droid-NDK-Extractor 脚本获取 ： 1234567sudo dnf install sleuthkit p7zip binwalk gitmkdir ~/workspacecd ~/workspace/git clone https://github.com/sickcodes/Droid-NDK-Extractor.gitchmod +x android-extract-ndk.sh./android-extract-ndk.sh 然后等待一段时间（可能需要代理）在项目目录下的 working/extracted/ 文件夹里面找到名为 native-bridge.tar 的压缩文档，然后进入 native-bridge.tar 所在的目录 ： 1234567891011121314cd ~/workspace/Droid-NDK-Extractor/working/extracted/mkdir native-bridgecd native-bridgesudo tar -xpf ../native-bridge.tarsudo chmod 0644 system/etc/init/ndk_translation_arm64.rcsudo chmod 0755 system/bin/armsudo chmod 0755 system/bin/arm64sudo chmod 0755 system/lib/armsudo chmod 0755 system/lib64/arm64sudo chmod 0644 system/etc/binfmt_misc/*sudo tar -cpf native-bridge.tar systemmv native-bridge.tar ..cd ..rm -r native-bridge 开始安装 在 workspace 目录下新建一个目录 redrooid 将 native-bridge.tar 移动到 redroid 目录下 在 redroid 目录下新建一个名为 dockerfile 的文档，并编辑加入以下内容： 123FROM redroid/redroid:11.0.0-latestADD native-bridge.tar / 4.编译新的 docker 镜像： 12cd ~/workspace/redroid/sudo docker build . -t redroid-11-libndk 等待镜像制作完成。 运行 启动 redroid 12345678910111213sudo docker run -itd --privileged \\ -v ~/data11-libndk:/data \\ -p 5555:5555 \\ redroid-11-libndk \\ androidboot.redroid_gpu_mode=host \\ ro.product.cpu.abilist=x86_64,arm64-v8a,x86,armeabi-v7a,armeabi \\ ro.product.cpu.abilist64=x86_64,arm64-v8a \\ ro.product.cpu.abilist32=x86,armeabi-v7a,armeabi \\ ro.dalvik.vm.isa.arm=x86 \\ ro.dalvik.vm.isa.arm64=x86_64 \\ ro.enable.native.bridge.exec=1 \\ ro.dalvik.vm.native.bridge=libndk_translation.so \\ ro.ndk_translation.version=0.2.2 2.使用 adb 连接 1adb connect localhost:5555 3.使用 QtScrcpy 连接到桌面 安装完成，音频好像串流不上，可能我的窗口管理系统是 wayland 的原因。（报错为：”wayland not support” 待解决） 4.安装 apk ： 1adb -s localhost:5555 install xxx.apk 5.启动或者关闭容器（开关机） ： 123456sudo docker ps -a sudo docker start &lt;container id&gt; ##开启容器sudo docker stop &lt;container id&gt; ##关闭容器 总结个人配置，对于我来说这些功能够用了，其它的比如 GoogleService Magisk 等有需求的再添加吧。","tags":["linux","fedora","redroid","android"],"categories":["Linux"]},{"title":"Hello World","path":"/notes/hello-world.html","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"title":"随心记时间线","path":"/about/index.html","content":"2023 年 04 月 04 日最近好累😩，不想有任何交流，只想沉浸在自己的世界里。2023 年 04 月 03 日心血来潮建立了这个博客，坚持下去！"},{"path":"/notes/index.html","content":"网站导航Tools Qwerty Leaner为键盘工作者设计的单词记忆与英语肌肉记忆锻炼软件 / Words learning and English muscle memory training software designed for keyboard workersBetahubApple Developer Beta 尝鲜Vue Color Avatar一个纯前端实现的头像生成网站极简简历极简简历是polebrief简历一个专业免费的个人简历制作平台。 Forum 野火论坛Pro/Engineer Creo 学习交流论坛MCBBS我的世界中文论坛 Resource 中文文案排版指北统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。"},{"title":"Hexo搭建笔记","path":"/notes/hexo-notes/index.html","content":"Hexo 永久链接优化在文章的 Front-Matter 中设置一个字段，例如：urlname 替换 title然后在 _config.yml 中我的设置： _config.yml123permalink: :category/:urlname.htmlpermalink_defaults: urlname: index"},{"title":"MarkDown学习笔记","path":"/notes/markdown-notes/index.html","content":"Markdown 语法规范https://github.github.com/gfm/https://github.github.com/gfm/ https://spec.commonmark.org/https://spec.commonmark.org/"}]